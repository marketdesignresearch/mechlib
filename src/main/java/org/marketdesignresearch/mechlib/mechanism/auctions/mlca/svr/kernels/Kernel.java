package org.marketdesignresearch.mechlib.mechanism.auctions.mlca.svr.kernels;

import java.util.Map;
import java.util.Set;

import org.marketdesignresearch.mechlib.core.Allocation;
import org.marketdesignresearch.mechlib.core.Bundle;
import org.marketdesignresearch.mechlib.core.Domain;
import org.marketdesignresearch.mechlib.core.bid.bundle.BundleExactValueBids;
import org.marketdesignresearch.mechlib.core.bidder.Bidder;
import org.marketdesignresearch.mechlib.instrumentation.MipInstrumentation;
import org.marketdesignresearch.mechlib.instrumentation.MipInstrumentationable;
import org.marketdesignresearch.mechlib.mechanism.auctions.mlca.ElicitationEconomy;
import org.marketdesignresearch.mechlib.winnerdetermination.WinnerDetermination;

import lombok.Getter;
import lombok.Setter;

/**
 * A support vector regression (SVR) kernel.
 * @author Manuel Beyeler
 */
public abstract class Kernel implements MipInstrumentationable {

	/**
	 * MipInstrumentation for WDPs generated by this kernel.
	 */
	@Setter
	@Getter
	private MipInstrumentation mipInstrumentation = MipInstrumentation.NO_OP;
	/**
	 * The time limit for WDPs generated by this kernel.
	 */
	@Setter
	@Getter
	private double wdpTimeLimit = -1;

	/**
	 * Get the kernel value for the given bundles.
	 */
	public abstract Double getValue(Bundle bundle, Bundle bundle2);

	/**
	 * Returns the allocation for the given domain and economy with the highest learned value, while the given excludedBundles are not part of this allocation. 
	 * @param domain the domain
	 * @param economy the economy (from the given domain)
	 * @param supportVectorsPerBidder 
	 * @param excludedBundles the bundles that must not be allocated
	 * @return the inferred allocation
	 */
	public Allocation getAllocationWithExcludedBundles(Domain domain, ElicitationEconomy economy,
			BundleExactValueBids supportVectorsPerBidder, Map<Bidder, Set<Bundle>> excludedBundles) {
		WinnerDetermination wd = this.createWinnerDetermination(domain, economy, supportVectorsPerBidder,
				excludedBundles);
		wd.setMipInstrumentation(this.getMipInstrumentation());
		return wd.getAllocation();
	}

	/**
	 * Creates a the kernel WDP for this specific kernel.
	 */
	protected abstract WinnerDetermination createWinnerDetermination(Domain domain, ElicitationEconomy economy,
			BundleExactValueBids supportVectorsPerBidder, Map<Bidder, Set<Bundle>> excludedBids);

	
	/**
	 * @return the type of this kernel.
	 */
	public abstract KernelType getKernelType();
}
