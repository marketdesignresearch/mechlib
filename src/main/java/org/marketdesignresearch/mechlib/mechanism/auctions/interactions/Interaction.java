package org.marketdesignresearch.mechlib.mechanism.auctions.interactions;

import org.marketdesignresearch.mechlib.core.bidder.Bidder;
import org.marketdesignresearch.mechlib.core.bidder.strategy.InteractionStrategy;
import org.marketdesignresearch.mechlib.mechanism.auctions.Auction;

/**
 * In an (iterative) auction every bidder is asked to provide certain informations in every round. We model
 * this using Interactions. An Interaction holds all information provided by the auction that can be used 
 * by the bidder to answer this query (interaction). The specific interaction will further contain methods
 * that allow a bidder to submit his answer to the auction. 
 * 
 * Every interaction has a matching strategy interface {@link InteractionStrategy} that is able to create
 * a bid which anserwers the query asked in this interaction. A bidders anwer to this interaction query 
 * might be customized by implementing and registering a new strategy {@link Bidder#setStrategy(InteractionStrategy)}.
 * 
 * @author Manuel Beyeler
 */
public interface Interaction {
	/**
	 * @return the bidder that belongs to this interaction
	 */
	Bidder getBidder();

	/**
	 * Set the auction in this interaction. This method is mainly used to enable the persistence of an
	 * auction by avoiding circular reference persistence. This method should be called when deserializing
	 * the model.
	 * 
	 * @param auction the auction that belongs to this interaction.
	 */
	void setAuction(Auction<?> auction);

	/**
	 * Submits the proposed bid (i.e. the bid generated by a bidders strategy {@link Strategy}).
	 */
	void submitProposedBid();
}
